public class Solution {
    public int maximalSquare(char[][] matrix) {
        // dynamic programming 
        
        if(matrix == null || matrix.length == 0) return 0;
        
        int row = matrix.length;
        int col = matrix[0].length;
        int[][] dp = new int[row][col];
        
        int res=0;
        // set top row and left col
        for(int i=0; i<row; i++){
            dp[i][0] = matrix[i][0]-'0';
            res = Math.max(res, dp[i][0]);
        }
        
        for(int i=0; i<col; i++){
            dp[0][i] = matrix[0][i]-'0';
            res = Math.max(res, dp[0][i]);
        }
        
        // set the rest of dp[][]
        
        for(int i=1; i<row; i++){
            for(int j=1; j<col; j++){
                if(matrix[i][j] == '1'){
                    dp[i][j] = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;
                    res = Math.max(dp[i][j], res);
                }
            }
        }
        
        return res*res;
    }
}

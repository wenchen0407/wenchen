public class Solution {
    
    public int maxSubArray(int[] nums) {
        int n=nums.length;
        int[] dp = new int[n];
        dp[0]=nums[0];
        int res=nums[0];
        for(int i=1; i<n; i++){
            if(dp[i-1]>0){
                dp[i]=dp[i-1]+nums[i];
            }else{
                dp[i]=nums[i];
            }
            res = Math.max(res, dp[i]);
        }
        
        return res;
        
    }
    // sliding window O(n^2)
    /*public int maxSubArray(int[] nums) {
        if(nums.length==0) return 0;
        if(nums.length==1) return nums[0];
        int res=Integer.MIN_VALUE;
        for(int len=1; len<=nums.length; len++){
            int sum=0;
            for(int j=0; j<len; j++){
                sum+=nums[j];
            }
            res=Math.max(res, sum);
            for(int j=1; j<=nums.length-len; j++){
                sum=sum-nums[j-1]+nums[j+len-1];
                res=Math.max(res, sum);
            }
            
        }
        return res;
        
    }*/
}

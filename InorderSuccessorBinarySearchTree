public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // Binary search tree solution
        //The idea is to compare root's value with p's value if root is not null, and consider the following two cases:

      // (1) root.val > p.val. In this case, root can be a possible answer, so we store the root node first and call it res. 
      
      // However, we don't know if there is anymore node on root's left that is larger than p.val. So we move root to its left and check again.

      // (2) root.val <= p.val. In this case, root cannot be p's inorder successor, neither can root's left child. So we only need to consider root's right child, thus we move root to its right and check again.

      // We continuously move root until exhausted. To this point, we only need to return the res in case 1.
        
        
        TreeNode succ=null;
        
        while(root!=null){
            if(p.val<root.val){
                succ = root;
                root=root.left;
            }else{
                root=root.right;
            }
        }
        return succ;
        
        
        // Naive solution: inorder iterative traversal for binary tree
  
          Stack<TreeNode> stack = new Stack<TreeNode>();

          while(root!=null){
            stack.push(root);
            root = root.left
          }
          boolean found = false;
          while(stack.size()>0){
            TreeNode node = stack.pop();
            if(found) return node;

            if(node == p) found = true;

            if(node.right!=null){
              node = node.right;
              while(node!=null){
                stack.push(node);
                node = node.left;
              }
            }
          }

          return null;
    }
    
    
    // Successor recursive

    public TreeNode successor(TreeNode root, TreeNode p) {
      if (root == null)
        return null;

      if (root.val <= p.val) {
        return successor(root.right, p);
      } else {
        TreeNode left = successor(root.left, p);
        return (left != null) ? left : root;
      }
    }
    
    //Predecessor recursive

    public TreeNode predecessor(TreeNode root, TreeNode p) {
      if (root == null)
        return null;

      if (root.val >= p.val) {
        return predecessor(root.left, p);
      } else {
        TreeNode right = predecessor(root.right, p);
        return (right != null) ? right : root;
      }
    }
    
}

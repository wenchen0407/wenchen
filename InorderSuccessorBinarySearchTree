/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // Binary search tree solution
        
        TreeNode succ=null;
        
        while(root!=null){
            if(p.val<root.val){
                succ = root;
                root=root.left;
            }else{
                root=root.right;
            }
        }
        return succ;
        
        
        // Naive solution: inorder iterative traversal for binary tree
  
          Stack<TreeNode> stack = new Stack<TreeNode>();

          while(root!=null){
            stack.push(root);
            root = root.left
          }
          boolean found = false;
          while(stack.size()>0){
            TreeNode node = stack.pop();
            if(found) return node;

            if(node == p) found = true;

            if(node.right!=null){
              node = node.right;
              while(node!=null){
                stack.push(node);
                node = node.left;
              }
            }
          }

          return null;
    }
    
}

public class MinStack {

    /** initialize your data structure here. */
    
    //int min;
    Stack<Integer> stack;
    PriorityQueue<Integer> heap;
    
    public MinStack() {
        stack = new Stack<Integer>();
        heap = new PriorityQueue<Integer>();
    }
    
    public void push(int x) {
        stack.push(x);
        heap.offer(x);
    }
    
    public void pop() {
        if(!stack.empty()){
            heap.remove(stack.peek());
            stack.pop();
        }
        
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return heap.peek();
    }
}

// Maintain one stack and minimum variable
public class MinStack {


    /** initialize your data structure here. */
    
    Stack<Integer> stack;   
    int min = Integer.MAX_VALUE;
    public MinStack() {
    	  stack= new Stack<Integer>();
    }
    
    public void push(int x) {
        if(x<=min){stack.push(min); min=x;}
	  stack.push(x);
    }
    
    public void pop() {
         if(x==min){stack.pop(); min=stack.pop();}     
   stack.pop();  
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

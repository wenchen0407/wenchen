/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node == null) return null;
        
        Map<Integer, UndirectedGraphNode> map = new HashMap<Integer, UndirectedGraphNode>();
        return helper(node,map);
    }
    
    public UndirectedGraphNode helper(UndirectedGraphNode node, Map<Integer, UndirectedGraphNode> map){
        UndirectedGraphNode newNode = new UndirectedGraphNode(node.label);
        map.put(newNode.label, newNode);
        
        for(int i=0; i<node.neighbors.size(); i++){
            
            if(map.containsKey(node.neighbors.get(i).label)){
                newNode.neighbors.add(map.get(node.neighbors.get(i).label));
            }else{
                //UndirectedGraphNode newneighbor = new UndirectedGraphNode(node.neighbor.get(i).label);
                newNode.neighbors.add(helper(node.neighbors.get(i), map));
            }
            
        }
        return newNode;
    }
}

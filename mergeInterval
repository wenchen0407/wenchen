/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {

      // ArrayList solution O(n^2)
     public List<Interval> merge(List<Interval> intervals) {
         List<Interval> res = new ArrayList<Interval>();
         if(intervals==null || intervals.size()==0) return res;

         Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval i, Interval j){
                return i.start-j.start;
            }
         });

         res.add(intervals.get(0));

         for(int i=1; i<intervals.size(); i++){
            boolean exist=false;
            for(int j=0; j<res.size(); j++){
                Interval item = res.get(j);
                if(item.end >= intervals.get(i).start){
                  item.end = Math.max(intervals.get(i).end, item.end);
                  item.start = Math.min(intervals.get(i).start, item.start);
                  exist=true;
                  break;
                }
            }

            if(!exist) res.add(intervals.get(i));
         }

         return res;
        
      }


     // O(nlogn) solution: use two vairable start and end record current start and end.
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> res = new ArrayList<Interval>();
        if(intervals==null || intervals.size()==0){
            return res;
        }
        
        Collections.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval a, Interval b){
                return a.start-b.start;
            }
        });
        
        //res.add(intervals.get(0));
        
        int start=intervals.get(0).start;
        int end=intervals.get(0).end;
        for(Interval i: intervals){
            if(i.start <= end){
                end = Math.max(end, i.end);
            }else{
                res.add(new Interval(start, end));
                start = i.start;
                end = i.end;
            }
        }
        
        res.add(new Interval(start, end));
        return res;
    }
}

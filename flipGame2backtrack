public class Solution {
    
    
    // backtrack with hashmap to reduce time complexity
    public boolean canWin(String s) {
        Map<String, Boolean> map = new HashMap<String, Boolean>();
        
        if(s==null|| s.length()<2){return false;}
        
        return helper(s, map);
    }
    
    public boolean helper(String s, Map<String, Boolean> map){
        if(map.containsKey(s)) return map.get(s);
        for(int i=0; i<s.length()-1; i++){
            if(s.startsWith("++", i)){
                String str = s.substring(0, i)+"--"+s.substring(i+2);
                if(!helper(str, map)){
                    map.put(s, true);
                    return true;
                }
            }
        }
        
        map.put(s, false);
        return false;
        
    }
    
    
    
    
    /*
    // backtrack solution, complexity: O(n!)
    public boolean canWin(String s) {
        
        
        if(s==null || s.length()<2) return false;
        
        for(int i=0; i<s.length()-1; i++){
            if(s.startsWith("++", i)){
                String t = s.substring(0, i)+"--"+s.substring(i+2);
                
                if(!canWin(t)) return true;
            }
        }
        
        return false;
    }*/
}

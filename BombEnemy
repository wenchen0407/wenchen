public class Solution {
    
    public int maxKilledEnemies(char[][] grid) {
        
        if(grid == null || grid.length==0) return 0;
        
        int res=0; 
        int rowcount=0;
        int[] colcount = new int[grid[0].length];
        
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(j==0 || grid[i][j] == 'W'){
                    rowcount=0;
                    if(grid[i][j] == 'E') rowcount=1;
                    for(int k=j+1; k<grid[0].length; k++){
                        if(grid[i][k] == 'W') break;
                        if(grid[i][k] == 'E') rowcount++;
                    }
                }
                
                if(i==0 || grid[i][j] == 'W'){
                    colcount[j]=0;
                    if(grid[i][j] == 'E') colcount[j]=1;
                    for(int k=i+1; k<grid.length; k++){
                        if(grid[k][j] == 'W') break;
                        if(grid[k][j] == 'E') colcount[j]++;
                    }
                }
                
                if(grid[i][j] == '0'){
                    res = Math.max(res, rowcount+colcount[j]);
                }
            }
        }
        
        return res;
    }
    
    /* Naive solution
    
    public int maxKilledEnemies(char[][] grid) {
        
        int res=0;
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(grid[i][j] == '0'){
                    // right hand side of the row 
                    int count=0;
                    for(int k=j+1; k<grid[0].length; k++){
                        if(grid[i][k]=='W') break;
                        if(grid[i][k]=='E') count++;
                    }
                    
                    // left hand side of the col
                    for(int k=j-1; k>=0; k--){
                        if(grid[i][k]=='W') break;
                        if(grid[i][k]=='E') count++;
                    }
                    
                    // colunm
                    for(int k=i+1; k<grid.length; k++){
                        if(grid[k][j]=='W') break;
                        if(grid[k][j]=='E') count++;
                    }
                    
                    for(int k=i-1; k>=0; k--){
                        if(grid[k][j]=='W') break;
                        if(grid[k][j]=='E') count++;
                    }
                    
                    res = Math.max(res, count);
                }
            }
        }
        
        return res;
        
    }*/
}

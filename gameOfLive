public class Solution {
    
    // in-place solution: -1: dead->live, -2 means: live->dead
    public void gameOfLife(int[][] board) {
        int m=board.length;
        int n=board[0].length;
        
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                int val=board[i][j];
                int numLive= live(board, i, j-1)+live(board, i-1, j)+live(board, i-1, j-1)+live(board, i+1, j)+live(board, i, j+1)+live(board, i+1, j+1)+live(board, i-1,j+1)+live(board, i+1, j-1);
                if(val == 0 && numLive == 3) board[i][j] = -1;
                else if(val == 1 && numLive<2) board[i][j] = -2;
                else if(val==1 && numLive>3) board[i][j] = -2;
                else if(val == 1 && numLive >=2 && numLive<=3) board[i][j]=1;
            }
        }
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(board[i][j] == -1) board[i][j]=1;
                else if(board[i][j] == -2) board[i][j]=0;
            }
        }
    }
    
    public int live(int[][] board, int i, int j){
        int m=board.length;
        int n=board[0].length;
        int res=0;
        if(i<0 || j<0 || i>=board.length || j>=board[0].length) return 0;
        if(board[i][j] == 1 || board[i][j] == -2) res= 1;
        if(board[i][j] == -1 || board[i][j]==0) res= 0;
        
        return res;
        
    }
    
    /* Naive solution, not in-place solution
    
    public void gameOfLife(int[][] board) {
        int[][] oldboard=new int[board.length][board[0].length];
        
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[i].length; j++){
                oldboard[i][j] = board[i][j];
            }
        }
        
        
        for(int i=0; i<board.length; i++){
            for(int j=0; j<board[i].length; j++){
                int num = numLiveNeighbors(i, j, oldboard);
                if(oldboard[i][j] == 1){
                    if(num<2){
                        board[i][j]=0;
                    }else if(num<=3){
                        board[i][j]=1;
                    }else{
                        board[i][j]=0;
                    }
                }else{
                    if(num == 3) board[i][j]=1;
                }
                
            }
        }
    }
    
    public int numLiveNeighbors(int i, int j, int[][] oldboard){
        int res=0;
        
        if(i>0 && oldboard[i-1][j]==1){
            res++;
        }
        
        if(j>0 && oldboard[i][j-1] == 1){
            res++;
        }
        
        if(i>0 && j>0 && oldboard[i-1][j-1]==1){
            res++;
        }
        
        if(i<oldboard.length-1 && oldboard[i+1][j]==1){
            res++;
        }
        
        if(j<oldboard[0].length-1 && oldboard[i][j+1]==1){
            res++;
        }
        
        if(i<oldboard.length-1 && j<oldboard[0].length-1 && oldboard[i+1][j+1]==1){
            res++;
        }
        
        if(i>0 &&j<oldboard[0].length-1 && oldboard[i-1][j+1] ==1 ){
            res++;
        }
        
        if(i<oldboard.length-1 && j>0 && oldboard[i+1][j-1]==1){
            res++;
        }
        
        return res;
    }*/
}
